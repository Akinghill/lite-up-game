{"ast":null,"code":"var _jsxFileName = \"/Users/austinhill/Documents/Projects/lights-out-game/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard/GameBoard';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport Title from './components/Title/Title';\nimport Smoke from './components/Smoke/Smoke';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      let id = e.target.id;\n      let newScore = this.state.score + 1;\n      let row = parseInt(id[0]);\n      let cell = parseInt(id[1]);\n\n      if (id >= 0 && id <= 44 && !isNaN(row)) {\n        let newGameState = this.state.gameState;\n        let changeThese = [row + 1, row - 1, cell + 1, cell - 1]; // Change values at these indecies\n\n        newGameState[row][cell] = 1 - newGameState[row][cell];\n\n        if (changeThese[0] <= 4) {\n          newGameState[changeThese[0]][cell] = 1 - newGameState[changeThese[0]][cell];\n        }\n\n        if (changeThese[1] >= 0) {\n          newGameState[changeThese[1]][cell] = 1 - newGameState[changeThese[1]][cell];\n        }\n\n        if (changeThese[2] <= 4) {\n          newGameState[row][changeThese[2]] = 1 - newGameState[row][changeThese[2]];\n        }\n\n        if (changeThese[3] >= 0) {\n          newGameState[row][changeThese[3]] = 1 - newGameState[row][changeThese[3]];\n        }\n\n        this.isGameWon();\n        this.setState({\n          score: newScore,\n          gameState: newGameState\n        });\n      }\n    };\n\n    this.state = {\n      gameWon: false,\n      score: 0,\n      gameState: [[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0]]\n    };\n  }\n\n  isGameWon() {\n    if (this.state.gameState.flat(2).reduce((a, b) => a + b, 0) === 0) {\n      this.setState({\n        gameWon: true\n      });\n    }\n  }\n\n  componentWillMount() {\n    this.setState({\n      gameState: this.createGameBoard()\n    });\n  }\n\n  createGameBoard() {\n    let numberOfRows = 5;\n    let cellsPerRow = 5;\n    let generatedBoard = [];\n\n    for (let i = 0; i < numberOfRows; i++) {\n      let newRow = [];\n\n      for (let j = 0; j < cellsPerRow; j++) {\n        newRow.push(Math.round(Math.random()));\n      }\n\n      generatedBoard.push(newRow);\n    }\n\n    return generatedBoard;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.handleClick,\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Smoke, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ScoreBoard, {\n      score: this.state.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(GameBoard, {\n      gameState: this.state.gameState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }), this.state.gameWon ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 34\n      }\n    }, \"You win\") : null));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/austinhill/Documents/Projects/lights-out-game/src/App.js"],"names":["React","Component","GameBoard","ScoreBoard","Title","Smoke","App","constructor","props","handleClick","e","id","target","newScore","state","score","row","parseInt","cell","isNaN","newGameState","gameState","changeThese","isGameWon","setState","gameWon","flat","reduce","a","b","componentWillMount","createGameBoard","numberOfRows","cellsPerRow","generatedBoard","i","newRow","j","push","Math","round","random","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard/GameBoard';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport Title from './components/Title/Title';\nimport Smoke from './components/Smoke/Smoke'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameWon: false,\n      score: 0,\n      gameState: [\n        [0, 1, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 1, 0, 0],\n      ],\n    };\n  }\n\n  handleClick = (e) => {\n    let id = e.target.id;\n    let newScore = this.state.score + 1;\n    let row = parseInt(id[0]);\n    let cell = parseInt(id[1]);\n\n    if (id >= 0 && id <= 44 && !isNaN(row)) {\n      let newGameState = this.state.gameState;\n      let changeThese = [row+1, row-1, cell+1, cell-1];\n  \n      // Change values at these indecies\n      newGameState[row][cell] = 1 - newGameState[row][cell];\n      if(changeThese[0] <= 4){\n        newGameState[changeThese[0]][cell] = 1 - newGameState[changeThese[0]][cell]\n      }\n      if(changeThese[1] >= 0){\n        newGameState[changeThese[1]][cell] = 1 - newGameState[changeThese[1]][cell]\n      }\n      if(changeThese[2] <= 4){\n        newGameState[row][changeThese[2]] = 1 - newGameState[row][changeThese[2]]\n      }\n      if(changeThese[3] >= 0){\n        newGameState[row][changeThese[3]] = 1 - newGameState[row][changeThese[3]]\n      }\n\n      this.isGameWon()\n\n      this.setState({\n        score: newScore,\n        gameState: newGameState,\n      });\n    }\n  };\n\n  isGameWon(){\n    if(this.state.gameState.flat(2).reduce((a, b) => a + b, 0) === 0){\n      this.setState({\n        gameWon: true\n      })\n    }\n  }\n  \n  componentWillMount() {\n    this.setState({\n      gameState: this.createGameBoard(),\n    });\n  }\n\n  createGameBoard() {\n    let numberOfRows = 5;\n    let cellsPerRow = 5;\n    let generatedBoard = [];\n    for (let i = 0; i < numberOfRows; i++) {\n      let newRow = [];\n      for (let j = 0; j < cellsPerRow; j++) {\n        newRow.push(Math.round(Math.random()));\n      }\n      generatedBoard.push(newRow);\n    }\n    return generatedBoard;\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick} className=\"App\">\n        <Smoke></Smoke>\n        <Title></Title>\n        <div className=\"game\">\n          <ScoreBoard score={this.state.score}></ScoreBoard>\n          <GameBoard gameState={this.state.gameState}></GameBoard>\n          {\n            this.state.gameWon ? <h1>You win</h1> : null\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}