{"version":3,"sources":["components/ScoreBoard/ScoreBoard.jsx","components/Login/Login.jsx","components/Login/Register.jsx","components/GameSquare/GameSquare.jsx","components/GameBoard/GameBoard.jsx","components/RestartButton/RestartButton.jsx","components/Button/Button.jsx","components/GameHUD/GameHUD.jsx","components/WinScreen/WinScreen.jsx","components/Title/Title.jsx","components/Game/Game.jsx","components/Debugger/Debugger.jsx","logic/gameLogic.js","App.js","serviceWorker.js","index.js"],"names":["Component","Login","props","state","loginEmail","loginPassword","handleChange","bind","handleSubmit","event","target","id","this","setState","value","preventDefault","data","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","user","console","log","_id","loadUser","onRouteChange","className","onSubmit","forhtml","name","type","placeholder","required","minLength","onChange","onClick","Register","nameVal","emailVal","passVal","pass2Val","password2","catch","err","htmlFor","GameSquare","isOn","GameBoard","gameState","map","row","rowIndex","key","cell","cellIndex","RestartButton","score","icon","faUndo","Button","buttonText","passClass","GameHUD","gameWon","isSignedIn","WinScreen","Title","Game","randomizeGameBoard","gameBoard","randomGameBoard","i","randomRow","Math","floor","random","randomCell","changeThese","createGameBoard","generatedBoard","newRow","j","push","App","scores","handleClick","e","updateUserScore","postScore","route","isNaN","gameSquareSelected","processedGameState","parseInt","processInput","flat","reduce","a","b","isGameWon","Number","highScoreData","joined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d3cce36f.chunk.js","sourcesContent":["import React from 'react'\nimport './ScoreBoard.css'\n// import data from './fakedata'\nimport { Component } from 'react'\n\nexport default class ScoreBoard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      topScores: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:5000/highscores', { method: \"GET\" })\n      .then(response => response.json())\n      .then(result => {\n        this.setState({\n          topScores:[\n            {\n              name: result[0].name\n            },\n            {\n              name: result[1].name\n            },\n          ]\n        })\n      })\n      .catch(e => {\n        console.log(e);\n        this.setState({ ...this.state, isFetching: false });\n      });\n  }\n\n  render() {\n    const data = this.state.topScores\n    return (\n      <div className='score-board contianer'>\n        <h1 className='score-title'>TOP SCORES</h1>\n        <div className='scores-grid'>\n          {\n            data.map((person, i) => (\n              <p key={i}>\n                {\n                  `${i + 1}: \n                ${person.name} \\t \n                ${'as'}`\n                }\n              </p>))\n          }\n        </div>\n      </div >\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport './Login.scss'\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loginEmail: '',\n      loginPassword: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    switch (event.target.id) {\n      case 'loginEmail':\n        this.setState({\n          loginEmail: event.target.value\n        })\n        break;\n      case 'loginPassword':\n        this.setState({\n          loginPassword: event.target.value\n        })\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const data = {\n      email: this.state.loginEmail,\n      password: this.state.loginPassword\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    };\n\n    fetch('http://localhost:5000/users/login', requestOptions)\n      .then(response => response.json())\n      .then(user => {\n        console.log(user)\n        if (user._id) {\n          console.log('found the user')\n          this.props.loadUser(user)\n          this.props.onRouteChange('home');\n        }\n      })\n  }\n\n  render() {\n    return (\n      <div className='login-window border'>\n        <form className=\"login-form\" onSubmit={this.handleSubmit}>\n          <fieldset>\n            <legend>Sign In</legend>\n\n            <label forhtml=\"email\" className=\"vhide\">Email</label>\n            <input\n              id=\"loginEmail\"\n              name=\"email\"\n              type=\"text\"\n              placeholder=\"Email\"\n              required minLength=\"2\"\n              onChange={this.handleChange}\n            />\n\n            <label forhtml=\"password\" className=\"vhide\">Password</label>\n            <input\n              id=\"loginPassword\"\n              name=\"password\"\n              type=\"text\"\n              placeholder=\"Password\"\n              required minLength=\"6\"\n              onChange={this.handleChange}\n            />\n\n            <button type=\"submit\" className=\"signin\">Sign in</button>\n            <button className=\"signin\" onClick={() => this.props.onRouteChange('register')}>Register</button>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport './Login.scss'\n\nexport default class Register extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      nameVal: '',\n      emailVal: '',\n      passVal: '',\n      pass2Val: '',\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    switch (event.target.id) {\n      case 'name':\n        this.setState({\n          nameVal: event.target.value\n        })\n        break;\n      case 'email':\n        this.setState({\n          emailVal: event.target.value\n        })\n        break;\n      case 'password':\n        this.setState({\n          passVal: event.target.value\n        })\n        break;\n      case 'password2':\n        this.setState({\n          pass2Val: event.target.value\n        })\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    const data = {\n      name: this.state.nameVal,\n      email: this.state.emailVal,\n      password: this.state.passVal,\n      password2: this.state.pass2Val\n    }\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    };\n\n    fetch('http://localhost:5000/users/register', requestOptions)\n      .then(response => console.log(response))\n      .catch(err => console.log(err))\n\n    this.props.onRouteChange('home')\n  }\n\n  render() {\n    // const { nameVal, emailVal, passVal, pass2Val } = this.state \n    return (\n      <div className='register-window border'>\n        <form className=\"register-form\"\n          onSubmit={this.handleSubmit}>\n          <fieldset>\n            <legend>Register</legend>\n\n            <label htmlFor=\"name\" className=\"vhide\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"form-control\"\n              placeholder=\"Name\"\n              onChange={this.handleChange}\n            />\n            <label htmlFor=\"email\" className=\"vhide\">Email</label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              required minLength=\"2\"\n              onChange={this.handleChange}\n            />\n\n            <label htmlFor=\"password\" className=\"vhide\">Password</label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              required minLength=\"6\"\n              onChange={this.handleChange}\n            />\n\n            <label htmlFor=\"password2\" className='vhide'>Confirm Password</label>\n            <input\n              type=\"password\"\n              id=\"password2\"\n              name=\"password2\"\n              placeholder=\"Confirm Password\"\n              onChange={this.handleChange}\n            />\n\n            <button type=\"submit\" className=\"signin\">Register</button>\n          </fieldset>\n        </form>\n        {/* <p className=\"lead mt-4\">Have An Account? <a href=\"/users/login\">Login</a></p> */}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './GameSquare.css';\n\n\nconst GameSquare = ({isOn, id}) => {\n  if (isOn) {\n    return (\n      <div className=\"GameSquare OFF\" id={id}> </div>\n    )\n  }\n  return (\n    <div className=\"GameSquare ON\" id={id}> </div>\n  )\n\n\n  // return (\n  //   isOn ? \n  //   <div className=\"GameSquare ON\" isOn={isOn}>\n  //   </div> :\n  //   <div className=\"GameSquare OFF\" isOn={isOn}>\n  //   </div>\n  // )\n} \n\nexport default GameSquare;","import React from 'react';\nimport './GameBoard.css';\n\nimport GameSquare from '../GameSquare/GameSquare';\n\nconst GameBoard = ({gameState}) => {\n\n  return (\n    <div className=\"gameBoard\">\n      {\n      gameState.map((row, rowIndex) => (\n        <div className=\"row\" id={`row${rowIndex}`} key={rowIndex}>\n          {\n            row.map((cell, cellIndex) => (\n              <GameSquare key={cellIndex} isOn={gameState[rowIndex][cellIndex]} id={`${rowIndex}${cellIndex}`}></GameSquare>\n            ))\n          }\n        </div>\n      ))\n      }\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo } from '@fortawesome/free-solid-svg-icons';\n\nimport './RestartButton.css';\n\nconst RestartButton = ({ score }) => {\n  return (\n      <div className=\"restart\" id=\"restart\">\n        <FontAwesomeIcon id=\"restartIcon\" icon={faUndo} />\n      </div>\n  );\n};\n\nexport default RestartButton;\n","import React from 'react';\nimport './Button.css';\n\nconst Button = ({ buttonText, id, passClass, onClick }) => {\n  return (\n    <div className={`button ${passClass}`} id={id} onClick={onClick}>\n      {buttonText}\n    </div>\n  );\n};\n\nexport default Button;","import React from 'react';\nimport RestartButton from '../RestartButton/RestartButton'\nimport Button from '../Button/Button'\n\nimport './GameHUD.css';\n\nconst GameHUD = ({ score, gameWon, isSignedIn, user }) => {\n  return (\n    <div className=\"game-hud\">\n      <div className='flexrow'>\n      {/* Display Username or ANON */}\n      {\n        user.name  ? <p id=\"player-name\">Player: {user.name}</p> \n        : <p id=\"player-name\">Player: ANON</p>\n      }\n        <Button passClass=\"hud-btn\" buttonText=\"Sign In\" onClick={()=>{console.log('clicked signin')}}/>\n        <Button passClass=\"hud-btn\" buttonText=\"Top Scores\"/>\n      </div>\n     \n      <div className='flexrow'>\n        <p id=\"score\">Moves: {score}</p>\n        <RestartButton></RestartButton>\n      </div>\n    </div>\n  );\n};\n\nexport default GameHUD;","import React from 'react';\nimport './WinScreen.css';\nimport Button from '../Button/Button';\n\nconst WinScreen = ({ onRouteChange }) => {\n  return (\n    <div className=\"win-screen\">\n      <h1 className=\"win-text\">You win</h1>\n      <div className=\"win-options\">\n        <Button buttonText=\"Login\" id=\"login\"/>\n        <Button buttonText=\"Play Again\" id=\"play-again\"/>\n      </div>\n    </div>\n  );\n};\n\nexport default WinScreen;\n","import React from 'react'\nimport './Title.css'\n\nconst Title = () => {\n  return (\n    <h1 id='title'>\n      LUMiN\n    </h1>\n  )\n}\n\nexport default Title","import React from 'react'\nimport GameBoard from '../GameBoard/GameBoard'\nimport GameHUD from '../GameHUD/GameHUD'\nimport WinScreen from '../WinScreen/WinScreen'\nimport Title from '../Title/Title'\n\n\nconst Game = ({gameState, score, gameWon, onRouteChange, user}) => {\n    return (\n      <div className=\"game\">\n        <Title />\n        <GameHUD score={score} gameWon={gameWon} user={user}/>\n        <GameBoard gameState={gameState}/>\n        {gameWon ? <WinScreen onRouteChange={onRouteChange} /> : null}\n      </div>\n    )\n}\n\nexport default Game\n","import React, { Component } from 'react'\n\nexport class Debugger extends Component {\n  render() {\n    return (\n      <div>\n        <button id='debugger'>\n          DEBUGGER\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Debugger\n","export function randomizeGameBoard(gameBoard) {\n  let randomGameBoard = gameBoard;\n  let timesToShuffle = 1000;\n  for (let i = 0; i <= timesToShuffle; i++) {\n    let randomRow = Math.floor(Math.random() * 5);\n    let randomCell = Math.floor(Math.random() * 5);\n\n    let changeThese = [\n      randomRow + 1,\n      randomRow - 1,\n      randomCell + 1,\n      randomCell - 1,\n    ];\n\n    // Change values at these indecies\n    randomGameBoard[randomRow][randomCell] =\n      1 - randomGameBoard[randomRow][randomCell];\n    if (changeThese[0] <= 4) {\n      randomGameBoard[changeThese[0]][randomCell] =\n        1 - randomGameBoard[changeThese[0]][randomCell];\n    }\n    if (changeThese[1] >= 0) {\n      randomGameBoard[changeThese[1]][randomCell] =\n        1 - randomGameBoard[changeThese[1]][randomCell];\n    }\n    if (changeThese[2] <= 4) {\n      randomGameBoard[randomRow][changeThese[2]] =\n        1 - randomGameBoard[randomRow][changeThese[2]];\n    }\n    if (changeThese[3] >= 0) {\n      randomGameBoard[randomRow][changeThese[3]] =\n        1 - randomGameBoard[randomRow][changeThese[3]];\n    }\n  }\n\n  return randomGameBoard;\n}\n\nexport function createGameBoard() {\n  let numberOfRows = 5;\n  let cellsPerRow = 5;\n  let generatedBoard = [];\n  for (let i = 0; i < numberOfRows; i++) {\n    let newRow = [];\n    for (let j = 0; j < cellsPerRow; j++) {\n      newRow.push(0);\n    }\n    generatedBoard.push(newRow);\n  }\n\n  return generatedBoard;\n}\n\nexport function gameSquareSelected(id) {\n  if (id >= 0 && id <= 44 && !isNaN(id[0])) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function isGameWon(state) {\n  if (state.gameState.flat(2).reduce((a, b) => a + b, 0) === 0) {\n    return true;\n  }\n}\n\nexport function processInput(id, gameState) {\n  let row = parseInt(id[0]);\n  let cell = parseInt(id[1]);\n\n  // increment Score\n  // let newScore = this.state.score + 1;\n\n  let changeThese = [row + 1, row - 1, cell + 1, cell - 1];\n\n  // Change values at these indecies\n  gameState[row][cell] = 1 - gameState[row][cell];\n  if (changeThese[0] <= 4) {\n    gameState[changeThese[0]][cell] = 1 - gameState[changeThese[0]][cell];\n  }\n  if (changeThese[1] >= 0) {\n    gameState[changeThese[1]][cell] = 1 - gameState[changeThese[1]][cell];\n  }\n  if (changeThese[2] <= 4) {\n    gameState[row][changeThese[2]] = 1 - gameState[row][changeThese[2]];\n  }\n  if (changeThese[3] >= 0) {\n    gameState[row][changeThese[3]] = 1 - gameState[row][changeThese[3]];\n  }\n\n  return gameState;\n  // if (isGameWon(this.state)) {\n  //   this.setState({\n  //     gameWon: true,\n  //   });\n  // }\n\n  // this.setState({\n  //   score: Number(newScore),\n  //   gameState: newGameState,\n  // });\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport Login from './components/Login/Login';\nimport Register from './components/Login/Register';\nimport Game from './components/Game/Game';\nimport Debugger from './components/Debugger/Debugger';\nimport {\n  randomizeGameBoard,\n  createGameBoard,\n  gameSquareSelected,\n  isGameWon,\n  processInput,\n} from './logic/gameLogic';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameWon: false,\n      score: 0,\n      gameState: [],\n      route: 'home',\n      highScoreData: [],\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        scores: [],\n        joined: '',\n      },\n    };\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        scores: data.scores,\n      },\n    });\n  };\n\n  handleClick = (e) => {\n    let id = e.target.id;\n    if (id === 'debugger') {\n      const updateUserScore = this.state.user\n      updateUserScore.scores.push(this.state.score)\n      this.setState(\n        {\n          user: updateUserScore,\n          gameWon: true,\n        },\n        () => this.postScore()\n      );\n    }\n    if (id === 'restart' || id === 'restartIcon' || id === 'play-again') {\n      this.setState({\n        score: 0,\n        gameState: randomizeGameBoard(createGameBoard()),\n        gameWon: false,\n      });\n    }\n    if (id === 'login') {\n      this.setState({\n        route: 'login',\n      });\n    }\n    // Verify a game square was selected.\n    if (gameSquareSelected(id)) {\n      let newGameState = this.state.gameState;\n      let processedGameState = processInput(id, newGameState);\n\n      if (isGameWon(this.state)) {\n        const updateUserScore = this.state.user\n        updateUserScore.scores.push(this.state.score)\n        this.setState(\n          {\n            user: updateUserScore,\n            gameWon: true,\n          },\n          () => this.postScore()\n        );\n      }\n\n      this.setState({\n        score: Number(this.state.score) + 1,\n        gameState: processedGameState,\n      });\n    }\n  };\n\n  componentWillMount() {\n    this.setState({\n      gameState: randomizeGameBoard(createGameBoard()),\n    });\n  }\n\n  onRouteChange = (route) => {\n    this.setState({\n      route: route,\n    });\n  };\n\n  postScore() {\n    if (this.state.gameWon && this.state.user.email !== '') {\n      const data = {\n        user: this.state.user,\n      };\n\n      fetch('http://localhost:5000/users/newscore', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      })\n        .then((response) => response.json())\n        .then((user) => {\n          this.loadUser(user)\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n\n  render() {\n    const { score, gameState, gameWon, route, user } = this.state;\n    return (\n      <div onClick={this.handleClick} className=\"App\">\n        {route === 'register' ? (\n          <Register onRouteChange={this.onRouteChange} />\n        ) : route === 'login' ? (\n          <Login onRouteChange={this.onRouteChange} loadUser={this.loadUser} />\n        ) : null}\n        <Game\n          score={score}\n          gameState={gameState}\n          gameWon={gameWon}\n          onRouteChange={this.onRouteChange}\n          user={user}\n        />\n        {/* <ScoreBoard highScoreData={this.state.highScoreData} /> */}\n        {/* <Debugger /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// const initialState = {\n//   gameWon: false,\n//   score: 0,\n//   gameState: [],\n//   route: 'home',\n//   highScoreData: [],\n//   isSignedIn: false,\n//   user: {\n//     id: '',\n//     name: '',\n//     email: '',\n//     entries: 0,\n//     joined: '',\n//   },\n// };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}