{"version":3,"sources":["components/ScoreBoard/fakedata.js","components/ScoreBoard/ScoreBoard.jsx","components/Login/Login.jsx","components/Login/Register.jsx","components/GameSquare/GameSquare.jsx","components/GameBoard/GameBoard.jsx","components/RestartButton/RestartButton.jsx","components/GameHUD/GameHUD.jsx","components/Button/Button.jsx","components/WinScreen/WinScreen.jsx","components/Title/Title.jsx","components/Game/Game.jsx","components/Debugger/Debugger.jsx","logic/gameLogic.js","App.js","serviceWorker.js","index.js"],"names":["data","initials","bestScore","ScoreBoard","props","state","fetch","method","then","response","json","result","setState","users","isFetching","catch","e","console","log","className","map","person","i","key","Component","Login","loginEmail","loginPassword","event","preventDefault","headers","body","JSON","stringify","email","this","password","user","id","loadUser","onRouteChange","target","value","action","onSubmit","handleSubmit","forhtml","name","type","placeholder","required","minLength","onClick","Register","nameVal","emailVal","passVal","pass2Val","handleChange","bind","URLSearchParams","FormData","pair","append","htmlFor","onChange","GameSquare","isOn","GameBoard","gameState","row","rowIndex","cell","cellIndex","RestartButton","score","icon","faUndo","GameHUD","isSignedIn","gameWon","Button","buttonText","WinScreen","Title","Game","Debugger","randomizeGameBoard","gameBoard","randomGameBoard","randomRow","Math","floor","random","randomCell","changeThese","createGameBoard","generatedBoard","newRow","j","push","App","handleClick","route","parseInt","isNaN","gameSquareSelected","newScore","newGameState","flat","reduce","a","b","isGameWon","Number","highScoreData","entries","joined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3954d7c6.chunk.js","sourcesContent":["const data = [\n  {\n    initials: 'AKH',\n    bestScore: 0\n  },\n  {\n    initials: 'NSF',\n    bestScore: 1\n  },\n  {\n    initials: 'AKH',\n    bestScore: 9\n  },\n  {\n    initials: 'NSF',\n    bestScore: 19\n  },\n  {\n    initials: 'AKH',\n    bestScore: 100\n  }\n]\n\nexport default data","import React from 'react'\nimport './ScoreBoard.css'\nimport data from './fakedata'\nimport { Component } from 'react'\n\nexport default class ScoreBoard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:5000/users/', { method: \"GET\" })\n      .then(response => response.json())\n      .then(result => {\n        this.setState({ users: result, isFetching: false })\n      })\n      .catch(e => {\n        console.log(e);\n        this.setState({ ...this.state, isFetching: false });\n      });\n  }\n\n  render() {\n    return (\n      <div className='score-board contianer'>\n        <h1 className='score-title'>TOP SCORES</h1>\n        <div className='scores-grid'>\n          {\n            data.map((person, i) => (\n              <p key={i}>\n                {\n                  `${i + 1}: \n                ${person.initials} \\t \n                ${person.bestScore}`\n                }\n              </p>))\n          }\n        </div>\n      </div >\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport './Login.scss'\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loginEmail: '',\n      loginPassword: ''\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    // const data = new FormData(event.target);\n    // const data = new URLSearchParams();\n    // for (const pair of new FormData(event.target)) {\n    //   data.append(pair[0], pair[1]);\n    // }\n    // console.log(data)\n\n    // fetch('http://localhost:5000/users/login', {\n    //   method: 'POST',\n    //   body: data\n    // }).then(response => console.log(response))\n    fetch('http://localhost:5000/users/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email: this.state.loginEmail,\n        password: this.state.loginPassword\n      })\n    })\n      .then(response => response.json())\n      .then(user => {\n        if (user.id) {\n          this.props.loadUser(user)\n          this.props.onRouteChange('home');\n        }\n      })\n  }\n\n  handleChange(event) {\n    switch (event.target.id) {\n      case 'loginEmail':\n        this.setState({\n          loginEmail: event.target.value\n        })\n        break;\n      case 'loginPassword':\n        this.setState({\n          loginPassword: event.target.value\n        })\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <div className='login-window border'>\n        <form action=\"/users/login\" method=\"POST\" className=\"login-form\" onSubmit={this.handleSubmit}>\n          <fieldset>\n            <legend>Sign In</legend>\n\n            <label forhtml=\"email\" className=\"vhide\">Email</label>\n            <input id=\"loginEmail\" name=\"email\" type=\"text\" placeholder=\"Email\" required minLength=\"2\" />\n\n            <label forhtml=\"password\" className=\"vhide\">Password</label>\n            <input id=\"loginPassword\" name=\"password\" type=\"text\" placeholder=\"Password\" required minLength=\"6\" />\n\n            <button type=\"submit\" className=\"signin\">Sign in</button>\n            <button className=\"signin\" onClick={() => this.props.onRouteChange('register')}>Register</button>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}\n\n// this.props.onRouteChange('home')\n","import React, { Component } from 'react';\nimport './Login.scss'\n\nexport default class Register extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      nameVal: '',\n      emailVal: '',\n      passVal: '',\n      pass2Val: '',\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    switch (event.target.id) {\n      case 'name':\n        this.setState({\n          nameVal: event.target.value\n        })\n        break;\n      case 'email':\n        this.setState({\n          emailVal: event.target.value\n        })\n        break;\n      case 'password':\n        this.setState({\n          passVal: event.target.value\n        })\n        break;\n      case 'password2':\n        this.setState({\n          pass2Val: event.target.value\n        })\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    // const data = new FormData(event.target);\n    const data = new URLSearchParams();\n    for (const pair of new FormData(event.target)) {\n      data.append(pair[0], pair[1]);\n    }\n    console.log(data)\n\n    \n    fetch('http://localhost:5000/users/register', {\n      method: 'POST',\n      body: data\n    }).then(response => console.log(response))\n    this.props.onRouteChange('home')\n  }\n\n  render() {\n    // const { nameVal, emailVal, passVal, pass2Val } = this.state \n    return (\n      <div className='register-window border'>\n        <form className=\"register-form\" \n        onSubmit={this.handleSubmit}>\n          <fieldset>\n            <legend>Register</legend>\n\n            <label htmlFor=\"name\" className=\"vhide\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"form-control\"\n              placeholder=\"Name\"\n              // value={nameVal}\n              onChange={this.handleChange}\n            />\n            <label htmlFor=\"email\" className=\"vhide\">Email</label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              required minLength=\"2\"\n              // value={emailVal}\n              onChange={this.handleChange}\n            />\n\n            <label htmlFor=\"password\" className=\"vhide\">Password</label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              required minLength=\"6\"\n              // value={passVal}\n              onChange={this.handleChange}\n            />\n\n            <label htmlFor=\"password2\" className='vhide'>Confirm Password</label>\n            <input\n              type=\"password\"\n              id=\"password2\"\n              name=\"password2\"\n              placeholder=\"Confirm Password\"\n              // value={pass2Val}\n              onChange={this.handleChange}\n            />\n\n            <button type=\"submit\" className=\"signin\">Register</button>\n          </fieldset>\n        </form>\n        {/* <p className=\"lead mt-4\">Have An Account? <a href=\"/users/login\">Login</a></p> */}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './GameSquare.css';\n\n\nconst GameSquare = ({isOn, id}) => {\n  if (isOn) {\n    return (\n      <div className=\"GameSquare OFF\" id={id}> </div>\n    )\n  }\n  return (\n    <div className=\"GameSquare ON\" id={id}> </div>\n  )\n\n\n  // return (\n  //   isOn ? \n  //   <div className=\"GameSquare ON\" isOn={isOn}>\n  //   </div> :\n  //   <div className=\"GameSquare OFF\" isOn={isOn}>\n  //   </div>\n  // )\n} \n\nexport default GameSquare;","import React from 'react';\nimport './GameBoard.css';\n\nimport GameSquare from '../GameSquare/GameSquare';\n\nconst GameBoard = ({gameState}) => {\n\n  return (\n    <div className=\"gameBoard\">\n      {\n      gameState.map((row, rowIndex) => (\n        <div className=\"row\" id={`row${rowIndex}`} key={rowIndex}>\n          {\n            row.map((cell, cellIndex) => (\n              <GameSquare key={cellIndex} isOn={gameState[rowIndex][cellIndex]} id={`${rowIndex}${cellIndex}`}></GameSquare>\n            ))\n          }\n        </div>\n      ))\n      }\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo } from '@fortawesome/free-solid-svg-icons';\n\nimport './RestartButton.css';\n\nconst RestartButton = ({ score }) => {\n  return (\n      <div className=\"restart\" id=\"restart\">\n        <FontAwesomeIcon id=\"restartIcon\" icon={faUndo} />\n      </div>\n  );\n};\n\nexport default RestartButton;\n","import React from 'react';\nimport RestartButton from '../RestartButton/RestartButton'\n\nimport './GameHUD.css';\n\nconst GameHUD = ({ score, gameWon, isSignedIn, user }) => {\n  return (\n    <div className=\"game-hud\">\n      {\n        isSignedIn  ? <p id=\"player-name\">Player: {user.name}</p> \n        : <p id=\"player-name\">Player: ANON</p>\n      }\n     \n      <div className='flexrow'>\n        <p id=\"score\">Moves: {score}</p>\n        <RestartButton></RestartButton>\n      </div>\n    </div>\n  );\n};\n\nexport default GameHUD;","import React from 'react';\nimport './Button.css';\n\nconst Button = ({ buttonText, id }) => {\n  return (\n    <div className=\"button\" id={id}>\n      {buttonText}\n    </div>\n  );\n};\n\nexport default Button;","import React from 'react';\nimport './WinScreen.css';\nimport Button from '../Button/Button';\n\nconst WinScreen = ({ onRouteChange }) => {\n  return (\n    <div className=\"win-screen\">\n      <h1 className=\"win-text\">You win</h1>\n      <div className=\"win-options\">\n        <Button buttonText=\"Login\" id=\"login\"/>\n        <Button buttonText=\"Play Again\" id=\"play-again\"/>\n      </div>\n    </div>\n  );\n};\n\nexport default WinScreen;\n","import React from 'react'\nimport './Title.css'\n\nconst Title = () => {\n  return (\n    <h1 id='title'>\n      LUMiN\n    </h1>\n  )\n}\n\nexport default Title","import React from 'react'\nimport GameBoard from '../GameBoard/GameBoard'\nimport GameHUD from '../GameHUD/GameHUD'\nimport WinScreen from '../WinScreen/WinScreen'\nimport Title from '../Title/Title'\n\n\nconst Game = ({gameState, score, gameWon, onRouteChange, user}) => {\n    return (\n      <div className=\"game\">\n        <Title />\n        <GameHUD score={score} gameWon={gameWon} user={user}/>\n        <GameBoard gameState={gameState}/>\n        {gameWon ? <WinScreen onRouteChange={onRouteChange} /> : null}\n      </div>\n    )\n}\n\nexport default Game\n","import React, { Component } from 'react'\n\nexport class Debugger extends Component {\n  render() {\n    return (\n      <div>\n        <button id='debugger'>\n          DEBUGGER\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Debugger\n","export function randomizeGameBoard(gameBoard){\n  let randomGameBoard = gameBoard;\n  let timesToShuffle = 1000;\n  for(let i = 0; i <= timesToShuffle; i++){\n    let randomRow = Math.floor(Math.random() * 5);\n    let randomCell = Math.floor(Math.random() * 5);\n\n    let changeThese = [randomRow+1, randomRow-1, randomCell+1, randomCell-1];\n\n    // Change values at these indecies\n    randomGameBoard[randomRow][randomCell] = 1 - randomGameBoard[randomRow][randomCell];\n    if(changeThese[0] <= 4){\n      randomGameBoard[changeThese[0]][randomCell] = 1 - randomGameBoard[changeThese[0]][randomCell]\n    }\n    if(changeThese[1] >= 0){\n      randomGameBoard[changeThese[1]][randomCell] = 1 - randomGameBoard[changeThese[1]][randomCell]\n    }\n    if(changeThese[2] <= 4){\n      randomGameBoard[randomRow][changeThese[2]] = 1 - randomGameBoard[randomRow][changeThese[2]]\n    }\n    if(changeThese[3] >= 0){\n      randomGameBoard[randomRow][changeThese[3]] = 1 - randomGameBoard[randomRow][changeThese[3]]\n    }\n  }\n\n  return randomGameBoard\n}\n\nexport function createGameBoard() {\n  let numberOfRows = 5;\n  let cellsPerRow = 5;\n  let generatedBoard = [];\n  for (let i = 0; i < numberOfRows; i++) {\n    let newRow = [];\n    for (let j = 0; j < cellsPerRow; j++) {\n      newRow.push(0);\n    }\n    generatedBoard.push(newRow);\n  }\n  \n  return generatedBoard;\n}\n\nexport function gameSquareSelected(id){\n  if(id >= 0 && id <= 44 && !isNaN(id[0])){\n    return true\n  } else {\n    return false\n  }\n}\n\nexport function isGameWon(state){\n  if(state.gameState.flat(2).reduce((a, b) => a + b, 0) === 0){\n    return true\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport Login from './components/Login/Login';\nimport Register from './components/Login/Register';\nimport Game from './components/Game/Game';\n// import Timer from './components/Timer/Timer';\nimport Debugger from './components/Debugger/Debugger';\nimport {\n  randomizeGameBoard,\n  createGameBoard,\n  gameSquareSelected,\n  isGameWon,\n} from './logic/gameLogic';\n\nconst initialState = {\n  gameWon: false,\n  score: 0,\n  gameState: [],\n  route: 'home',\n  highScoreData: [],\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: '',\n  },\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameWon: false,\n      score: 0,\n      gameState: [],\n      route: 'home',\n      highScoreData: [],\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: '',\n      },\n    };\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n      },\n    });\n  };\n\n  handleClick = (e) => {\n    let id = e.target.id;\n    if (id === 'debugger') {\n      this.setState({\n        gameWon: true,\n      });\n    }\n    if (id === 'restart' || id === 'restartIcon' || id === 'play-again') {\n      this.setState({\n        score: 0,\n        gameState: randomizeGameBoard(createGameBoard()),\n        gameWon: false,\n      });\n    }\n    if (id === 'login') {\n      this.setState({\n        route: 'login',\n      });\n    }\n\n    let row = parseInt(id[0]);\n    let cell = parseInt(id[1]);\n\n    // Verify a game square was selected.\n    if (gameSquareSelected(id)) {\n      let newScore = this.state.score + 1;\n      let newGameState = this.state.gameState;\n      let changeThese = [row + 1, row - 1, cell + 1, cell - 1];\n\n      // Change values at these indecies\n      newGameState[row][cell] = 1 - newGameState[row][cell];\n      if (changeThese[0] <= 4) {\n        newGameState[changeThese[0]][cell] =\n          1 - newGameState[changeThese[0]][cell];\n      }\n      if (changeThese[1] >= 0) {\n        newGameState[changeThese[1]][cell] =\n          1 - newGameState[changeThese[1]][cell];\n      }\n      if (changeThese[2] <= 4) {\n        newGameState[row][changeThese[2]] =\n          1 - newGameState[row][changeThese[2]];\n      }\n      if (changeThese[3] >= 0) {\n        newGameState[row][changeThese[3]] =\n          1 - newGameState[row][changeThese[3]];\n      }\n\n      if (isGameWon(this.state)) {\n        this.setState({\n          gameWon: true,\n        });\n      }\n\n      this.setState({\n        score: Number(newScore),\n        gameState: newGameState,\n      });\n    }\n  };\n\n  componentWillMount() {\n    this.setState({\n      gameState: randomizeGameBoard(createGameBoard()),\n    });\n  }\n\n  onRouteChange = (route) => {\n    this.setState({\n      route: route,\n    });\n  };\n\n  render() {\n    const { score, gameState, gameWon, route, user } = this.state;\n    return (\n      <div onClick={this.handleClick} className=\"App\">\n        {route === 'register' ? (\n          <Register onRouteChange={this.onRouteChange} />\n        ) : route === 'login' ? (\n          <Login onRouteChange={this.onRouteChange} />\n        ) : null}\n        <Game\n          score={score}\n          gameState={gameState}\n          gameWon={gameWon}\n          onRouteChange={this.onRouteChange}\n          user={user}\n        />\n        <ScoreBoard highScoreData={this.state.highScoreData} />\n        <Debugger />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}