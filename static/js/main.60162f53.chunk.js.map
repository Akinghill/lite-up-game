{"version":3,"sources":["components/Title/Title.jsx","components/GameSquare/GameSquare.jsx","components/GameBoard/GameBoard.jsx","components/RestartButton/RestartButton.jsx","components/ScoreBoard/ScoreBoard.jsx","components/Button/Button.jsx","components/WinScreen/WinScreen.jsx","components/Game/Game.jsx","components/Debugger/Debugger.jsx","logic/gameLogic.js","App.js","serviceWorker.js","index.js"],"names":["Title","id","GameSquare","isOn","className","GameBoard","gameState","map","row","rowIndex","key","cell","cellIndex","RestartButton","score","icon","faUndo","ScoreBoard","Button","buttonText","WinScreen","Game","gameWon","Debugger","Component","randomizeGameBoard","gameBoard","randomGameBoard","i","randomRow","Math","floor","random","randomCell","changeThese","createGameBoard","generatedBoard","newRow","j","push","App","props","handleClick","e","target","setState","parseInt","isNaN","gameSquareSelected","newScore","state","newGameState","flat","reduce","a","b","isGameWon","this","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60162f53.chunk.js","sourcesContent":["import React from 'react'\nimport './Title.css'\n\nconst Title = () => {\n  return (\n    <h1 id='title'>\n      LUMiN\n    </h1>\n  )\n}\n\nexport default Title","import React from 'react';\nimport './GameSquare.css';\n\n\nconst GameSquare = ({isOn, id}) => {\n  if (isOn) {\n    return (\n      <div className=\"GameSquare OFF\" id={id}> </div>\n    )\n  }\n  return (\n    <div className=\"GameSquare ON\" id={id}> </div>\n  )\n\n\n  // return (\n  //   isOn ? \n  //   <div className=\"GameSquare ON\" isOn={isOn}>\n  //   </div> :\n  //   <div className=\"GameSquare OFF\" isOn={isOn}>\n  //   </div>\n  // )\n} \n\nexport default GameSquare;","import React from 'react';\nimport './GameBoard.css';\n\nimport GameSquare from '../GameSquare/GameSquare';\n\nconst GameBoard = ({gameState}) => {\n\n  return (\n    <div className=\"gameBoard\">\n      {\n      gameState.map((row, rowIndex) => (\n        <div className=\"row\" id={`row${rowIndex}`} key={rowIndex}>\n          {\n            row.map((cell, cellIndex) => (\n              <GameSquare key={cellIndex} isOn={gameState[rowIndex][cellIndex]} id={`${rowIndex}${cellIndex}`}></GameSquare>\n            ))\n          }\n        </div>\n      ))\n      }\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo } from '@fortawesome/free-solid-svg-icons';\n\nimport './RestartButton.css';\n\nconst RestartButton = ({ score }) => {\n  return (\n      <div className=\"restart\" id=\"restart\">\n        <FontAwesomeIcon id=\"restartIcon\" icon={faUndo} />\n      </div>\n  );\n};\n\nexport default RestartButton;\n","import React from 'react';\nimport RestartButton from '../RestartButton/RestartButton'\n\nimport './ScoreBoard.css';\n\nconst ScoreBoard = ({ score }) => {\n  return (\n    <div className=\"score-board\">\n      <h1>Moves: {score}</h1>\n      <RestartButton></RestartButton>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React from 'react';\nimport './Button.css';\n\nconst Button = ({ buttonText, id }) => {\n  return (\n    <div className=\"button\" id={id}>\n      {buttonText}\n    </div>\n  );\n};\n\nexport default Button;","import React from 'react';\nimport './WinScreen.css';\nimport Button from '../Button/Button';\n\nconst WinScreen = () => {\n  return (\n    <div className=\"win-screen\">\n      <h1 className=\"win-text\">You win</h1>\n      <div className=\"win-options\">\n        <Button buttonText=\"Login\" />\n        <Button buttonText=\"Play Again\" id=\"play-again\"/>\n      </div>\n    </div>\n  );\n};\n\nexport default WinScreen;\n","import React from 'react'\nimport GameBoard from '../GameBoard/GameBoard'\nimport ScoreBoard from '../ScoreBoard/ScoreBoard'\nimport WinScreen from '../WinScreen/WinScreen'\n\n\nconst Game = ({gameState, score, gameWon}) => {\n    return (\n      <div className=\"game\">\n        <ScoreBoard score={score}/>\n        <GameBoard gameState={gameState}/>\n        {gameWon ? <WinScreen /> : null}\n      </div>\n    )\n}\n\nexport default Game\n","import React, { Component } from 'react'\n\nexport class Debugger extends Component {\n  render() {\n    return (\n      <div>\n        <button id='debugger'>\n          DEBUGGER\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Debugger\n","export function randomizeGameBoard(gameBoard){\n  let randomGameBoard = gameBoard;\n  let timesToShuffle = 100;\n  for(let i = 0; i <= timesToShuffle; i++){\n    let randomRow = Math.floor(Math.random() * 5);\n    let randomCell = Math.floor(Math.random() * 5);\n\n    let changeThese = [randomRow+1, randomRow-1, randomCell+1, randomCell-1];\n\n    // Change values at these indecies\n    randomGameBoard[randomRow][randomCell] = 1 - randomGameBoard[randomRow][randomCell];\n    if(changeThese[0] <= 4){\n      randomGameBoard[changeThese[0]][randomCell] = 1 - randomGameBoard[changeThese[0]][randomCell]\n    }\n    if(changeThese[1] >= 0){\n      randomGameBoard[changeThese[1]][randomCell] = 1 - randomGameBoard[changeThese[1]][randomCell]\n    }\n    if(changeThese[2] <= 4){\n      randomGameBoard[randomRow][changeThese[2]] = 1 - randomGameBoard[randomRow][changeThese[2]]\n    }\n    if(changeThese[3] >= 0){\n      randomGameBoard[randomRow][changeThese[3]] = 1 - randomGameBoard[randomRow][changeThese[3]]\n    }\n  }\n\n  return randomGameBoard\n}\n\nexport function createGameBoard() {\n  let numberOfRows = 5;\n  let cellsPerRow = 5;\n  let generatedBoard = [];\n  for (let i = 0; i < numberOfRows; i++) {\n    let newRow = [];\n    for (let j = 0; j < cellsPerRow; j++) {\n      newRow.push(0);\n    }\n    generatedBoard.push(newRow);\n  }\n  \n  return generatedBoard;\n}\n\nexport function gameSquareSelected(id){\n  if(id >= 0 && id <= 44 && !isNaN(id[0])){\n    return true\n  } else {\n    return false\n  }\n}\n\nexport function isGameWon(state){\n  if(state.gameState.flat(2).reduce((a, b) => a + b, 0) === 0){\n    return true\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/Title/Title';\nimport Game from './components/Game/Game';\nimport Debugger from './components/Debugger/Debugger';\nimport {\n  randomizeGameBoard,\n  createGameBoard,\n  gameSquareSelected,\n  isGameWon,\n} from './logic/gameLogic';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameWon: false,\n      score: 0,\n      gameState: [],\n    };\n  }\n\n  handleClick = (e) => {\n    let id = e.target.id;\n    if (id === 'debugger') {\n      this.setState({\n        gameWon: true,\n      });\n    }\n    if (id === 'restart' || id === 'restartIcon' || id === 'play-again') {\n      this.setState({\n        score: 0,\n        gameState: randomizeGameBoard(createGameBoard()),\n        gameWon: false,\n      });\n    }\n\n    let row = parseInt(id[0]);\n    let cell = parseInt(id[1]);\n\n    // Verify a game square was selected.\n    if (gameSquareSelected(id)) {\n      let newScore = this.state.score + 1;\n      let newGameState = this.state.gameState;\n      let changeThese = [row + 1, row - 1, cell + 1, cell - 1];\n\n      // Change values at these indecies\n      newGameState[row][cell] = 1 - newGameState[row][cell];\n      if (changeThese[0] <= 4) {\n        newGameState[changeThese[0]][cell] =\n          1 - newGameState[changeThese[0]][cell];\n      }\n      if (changeThese[1] >= 0) {\n        newGameState[changeThese[1]][cell] =\n          1 - newGameState[changeThese[1]][cell];\n      }\n      if (changeThese[2] <= 4) {\n        newGameState[row][changeThese[2]] =\n          1 - newGameState[row][changeThese[2]];\n      }\n      if (changeThese[3] >= 0) {\n        newGameState[row][changeThese[3]] =\n          1 - newGameState[row][changeThese[3]];\n      }\n\n      if (isGameWon(this.state)) {\n        this.setState({\n          gameWon: true,\n        });\n      }\n\n      this.setState({\n        score: newScore,\n        gameState: newGameState,\n      });\n    }\n  };\n\n  componentWillMount() {\n    this.setState({\n      gameState: randomizeGameBoard(createGameBoard()),\n    });\n  }\n\n  render() {\n    const { score, gameState, gameWon } = this.state;\n    return (\n      <div onClick={this.handleClick} className=\"App\">\n        <Title />\n        <Game score={score} gameState={gameState} gameWon={gameWon} />\n        <Debugger />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}